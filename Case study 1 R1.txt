#What is the total amount each customer spent at the restaurant?

SELECT s.customer_id, SUM(m.price) AS Amount_spent
FROM sales s LEFT JOIN menu m ON s.product_id = m.product_id
GROUP BY s.customer_id;

#How many days has each customer visited the restaurant?

SELECT customer_id, COUNT(DISTINCT order_date) AS days
FROM sales
GROUP BY customer_id;


#What was the first item from the menu purchased by each customer?

WITH cte AS (
    SELECT customer_id, MIN(order_date) AS first_orderdate
    FROM sales
    GROUP BY customer_id
)
SELECT cte.customer_id, m.product_name
FROM cte
JOIN sales s ON cte.customer_id = s.customer_id AND cte.first_orderdate = s.order_date
JOIN menu m ON s.product_id = m.product_id;

Optimized query:

SELECT s.customer_id, m.product_name
FROM (SELECT customer_id,product_id, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date) AS rn
FROM sales ) s
JOIN menu m ON s.product_id = m.product_id
WHERE s.rn = 1;

#What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT m.product_name AS product, COUNT(s.customer_id) AS times_purchased
FROM menu m JOIN sales s ON m.product_id = s.product_id
GROUP BY product
ORDER BY times_purchased DESC LIMIT 1;

#Which item was the most popular for each customer?

SELECT A.customer_id, A.product_id, m.product_name
FROM(
SELECT customer_id,product_id, COUNT(product_id) AS product_count,ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY COUNT(product_id) DESC) AS rn
FROM sales 
GROUP BY customer_id,product_id
) A
JOIN menu m ON A.product_id = m.product_id
WHERE rn = 1 ;

Which item was purchased first by the customer after they became a member?
 
SELECT A.customer, A.product, m.product_name
FROM (
SELECT s.customer_id AS customer, s.order_date, s.product_id AS product, m1.join_date, ROW_NUMBER() OVER (PARTITION BY s.customer_id ORDER BY s.order_date DESC) AS rn
FROM sales s
JOIN members m1 ON s.customer_id = m1.customer_id
WHERE s.order_date >=  m1.join_date
) A
JOIN menu m ON A.product = m.product_id
WHERE rn = 1;

Which item was purchased just before the customer became a member?

SELECT A.customer, A.product, m.product_name
FROM (
SELECT s.customer_id AS customer, s.order_date, s.product_id AS product, m1.join_date, ROW_NUMBER() OVER (PARTITION BY s.customer_id ORDER BY s.order_date) AS rn
FROM sales s
JOIN members m1 ON s.customer_id = m1.customer_id
WHERE s.order_date <=  m1.join_date
) A
JOIN menu m ON A.product = m.product_id
WHERE rn = 1;

What is the total items and amount spent for each member before they became a member?

SELECT s.customer_id, SUM(m.price) AS amount_spent, COUNT(s.product_id) AS total_items
FROM sales s JOIN menu m ON s.product_id = m.product_id
LEFT JOIN members m1 ON s.customer_id = m1.customer_id
WHERE s.order_date < m1.join_date
GROUP BY s.customer_id
ORDER BY s.customer_id;

If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

SELECT A.customer, SUM(A.points) AS total_points
FROM
(
SELECT s.customer_id AS customer,(CASE WHEN m.product_name = "sushi" THEN (SUM(m.price) * 20) ELSE (SUM(m.price) * 10) END) AS points
FROM sales s 
JOIN menu m ON s.product_id = m.product_id
GROUP BY s.customer_id, m.product_name
) A
GROUP BY A.customer
ORDER BY A.customer;


In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - 
how many points do customer A and B have at the end of January?

SELECT s.customer_id, (SUM(m.price) * 20) AS points
FROM sales s JOIN members m1 ON s.customer_id = m1.customer_id
JOIN menu m ON s.product_id = m.product_id
WHERE (s.order_date >= m1.join_date) AND (MONTH(s.order_date) = "01")
GROUP BY s.customer_id
ORDER BY s.customer_id;

Creating common table combining all the other tables including ranking

SELECT s.customer_id, s.order_date, m.product_name, m.price, (CASE WHEN m1.customer_id IS NULL THEN 'N' WHEN s.order_date < m1.join_date THEN 'N' ELSE 'Y' END) AS member,
DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY m.price ASC) AS ranking
FROM sales s LEFT JOIN menu m ON s.product_id = m.product_id
LEFT JOIN members m1 ON s.customer_id = m1.customer_id;
